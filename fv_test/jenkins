import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

public class MapToFileExample {
    public static void main(String[] args) throws IOException {
        Map<String, String> myMap = /* Your map data */;
        String formattedData = formatAsTable(myMap);

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("map_data.txt"))) {
            writer.write(formattedData);
        }
    }

    private static String formatAsTable(Map<String, String> data) {
        StringBuilder table = new StringBuilder();
        for (Map.Entry<String, String> entry : data.entrySet()) {
            table.append(String.format("%-20s %s%n", entry.getKey(), entry.getValue()));
        }
        return table.toString();
    }
}




import net.serenitybdd.core.pages.PageObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import net.thucydides.core.annotations.DefaultUrl;

@DefaultUrl("https://jenkinscore-nonprod.ccd.com/cj/login")
public class LoginPage extends PageObject {

    public void loginWithCredentials(String username, String password) {
        $("#j_username").type(username);
        $("#j_password").type(password);
        $("input[name='Submit']").click();
    }
}


import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

// Assuming you have a WebDriver instance, e.g., driver

// Find the buildHistory div by its id
WebElement buildHistoryDiv = driver.findElement(By.id("buildHistory"));

// Find all the rows with class "build-row" within the buildHistory div
List<WebElement> buildRows = buildHistoryDiv.findElements(By.className("build-row"));

// Check if there is at least one "build-row" found
if (!buildRows.isEmpty()) {
    // Get the first row with class "build-row"
    WebElement firstBuildRow = buildRows.get(0);

    // Find the cell with class "panel build details" within the first row
    WebElement detailsCell = firstBuildRow.findElement(By.className("panel build details"));

    // Find the link within the details cell
    WebElement link = detailsCell.findElement(By.tagName("a"));

    // Get the content of the link
    String linkText = link.getText();
    System.out.println("Link Text: " + linkText);
} else {
    System.out.println("No rows with class 'build-row' found in the buildHistory div.");
}


import net.serenitybdd.core.pages.PageObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class JenkinsControllerPage extends PageObject {

    public void navigateToController(String controllerUrl) {
        getDriver().get(controllerUrl);
    }

    public void triggerStaleJobs(String apId, int days) {
        triggerJobsInTable(apId, days);
    }

    private void triggerJobsInTable(String apId, int days) {
        List<WebElement> jobRows = findAll(By.cssSelector(".projectstatus tr"));

        for (WebElement jobRow : jobRows) {
            String rowClass = jobRow.getAttribute("class");
            if (rowClass.contains("job-status-")) {
                navigateIntoFolder(jobRow);
            } else if (rowClass.contains("job-status-red") || rowClass.contains("job-status-green")) {
                String jobName = jobRow.getText();
                if (shouldTriggerJob(jobRow, days)) {
                    logJobTriggerInfo(apId, jobName);
                    triggerJob(jobRow);
                }
            }
        }
    }

    private void navigateIntoFolder(WebElement folderRow) {
        WebElement folderLink = folderRow.findElement(By.tagName("a"));
        folderLink.click();
        // Add logic to handle entering the folder and looking for jobs inside
        triggerJobsInTable(apId, days); // Recursively trigger jobs within the folder
        getDriver().navigate().back(); // Navigate back to the parent page
    }

    private boolean shouldTriggerJob(WebElement jobRow, int days) {
        WebElement buildTimeElement = jobRow.findElement(By.className("build-time"));
        String buildTimeText = buildTimeElement.getText();

        LocalDate lastBuildDate = LocalDate.parse(buildTimeText, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate currentDate = LocalDate.now();

        return lastBuildDate.isBefore(currentDate.minusDays(days));
    }

    private void triggerJob(WebElement jobRow) {
        WebElement runButton = jobRow.findElement(By.className("run-button"));
        runButton.click();

        // Handle confirmation dialogs or notifications if needed
    }

    private void logJobTriggerInfo(String apId, String jobName) {
        String logMessage = String.format("Triggering job: %s for AP ID: %s", jobName, apId);
        getLogger().info(logMessage);
    }
}


import net.thucydides.core.annotations.Step;
import net.thucydides.core.steps.ScenarioSteps;

public class JenkinsSteps extends ScenarioSteps {

    LoginPage loginPage;
    JenkinsControllerPage controllerPage;

    @Step
    public void loginToJenkins(String username, String password) {
        loginPage.open();
        loginPage.loginWithCredentials(username, password);
    }

    @Step
    public void navigateToControllerPage(String controllerUrl) {
        controllerPage.navigateToController(controllerUrl);
    }

    @Step
    public void triggerStaleJobs(String apId, int days) {
        controllerPage.triggerStaleJobs(apId, days);
    }
}


import net.thucydides.core.annotations.Steps;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;

public class JenkinsStepDefinitions {

    @Steps
    JenkinsSteps jenkinsSteps;

    private String apId; // Store the AP ID for later use

    @Given("^the service account user can login to access the jenkins controller for '(.+)'$")
    public void loginToJenkins(String apId) {
        this.apId = apId;
        // Your logic to login using apId
    }

    @When("^the service account user navigates to the controller page$")
    public void navigateToControllerPage() {
        String controllerUrl = "https://jenkinscore-nonprod.ccd.com/teams-" + apId + "-nonprod/job/" + apId + "-nonprod/";
        jenkinsSteps.navigateToControllerPage(controllerUrl);
    }

    @When("^the service account user triggers any jobs that haven't run in (\\d+) days$")
    public void triggerStaleJobs(int days) {
        jenkinsSteps.triggerStaleJobs(apId, days);
    }
}

Feature: Trigger Stale Jenkins Jobs

  Background:
    Given the service account user can login to access the jenkins controller for 'AP322555'

  Scenario: Trigger stale jobs
    When the service account user navigates to the controller page
    And the service account user triggers any jobs that haven't run in 50 days
    Then the jobs should be triggered successfully
