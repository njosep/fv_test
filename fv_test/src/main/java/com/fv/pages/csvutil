import com.opencsv.CSVWriter;
import com.opencsv.bean.BeanField;
import com.opencsv.bean.CsvBindByName;
import com.opencsv.bean.CsvRequiredFieldEmptyException;
import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.StatefulBeanToCsv;
import com.opencsv.bean.StatefulBeanToCsvBuilder;
import org.apache.commons.lang3.StringUtils;

import java.io.StringWriter;
import java.util.List;

public class CsvUtils {

    public static StringWriter createCsv(List<Student> studentList) throws Exception {
        StringWriter stringWriter = new StringWriter();

        CustomMappingStrategy<Student> columnStrategy = new CustomMappingStrategy<>(Student.class);

        StatefulBeanToCsv<Student> csvBuilder = new StatefulBeanToCsvBuilder<>(stringWriter)
                .withSeparator(CSVWriter.DEFAULT_SEPARATOR)
                .withQuotechar(CSVWriter.NO_QUOTE_CHARACTER)
                .withMappingStrategy(columnStrategy)
                .build();

        csvBuilder.write(studentList);
        return stringWriter;
    }

    public static class CustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
        public CustomMappingStrategy(Class<T> clazz) {
            setType(clazz);
        }

        @Override
        public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
            super.generateHeader(bean);

            int numColumns = getFieldMap().values().size();
            String[] customHeader = new String[numColumns];

            for (int i = 0; i < numColumns; i++) {
                BeanField<T> beanField = findField(i);
                customHeader[i] = extractHeaderName(beanField);
            }

            return customHeader;
        }

        private String extractHeaderName(BeanField<T> beanField) {
            if (beanField == null || beanField.getField() == null) {
                return StringUtils.EMPTY;
            }

            CsvBindByName bindByNameAnnotation = beanField.getField().getDeclaredAnnotation(CsvBindByName.class);
            return bindByNameAnnotation != null ? bindByNameAnnotation.column() : StringUtils.EMPTY;
        }
    }
}
