import io.cucumber.datatable.DataTable;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public class DatabaseUtil {

    private static final String DB_URL = "jdbc:postgresql://localhost:5432/mydatabase";
    private static final String DB_USERNAME = "username";
    private static final String DB_PASSWORD = "password";

    public static void insertRowsIntoTable(String tableName, DataTable dataTable) {
        List<Map<String, String>> rows = dataTable.asMaps(String.class, String.class);
        List<String> columnNames = extractColumnNames(rows.get(0));
        List<String> dataTypes = extractDataTypes(rows.get(1));

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            for (int i = 2; i < rows.size(); i++) {
                Map<String, String> row = rows.get(i);
                Map<String, Object> processedRow = processRowData(row, columnNames, dataTypes);
                String insertQuery = generateInsertQuery(tableName, processedRow);
                PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
                bindRowValues(preparedStatement, processedRow);
                preparedStatement.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exception as per your project's requirements
        }
    }

    private static List<String> extractColumnNames(Map<String, String> row) {
        return List.copyOf(row.keySet());
    }

    private static List<String> extractDataTypes(Map<String, String> dataTypeRow) {
        return List.copyOf(dataTypeRow.values());
    }

    private static Map<String, Object> processRowData(Map<String, String> rowData, List<String> columnNames, List<String> dataTypes) {
        Map<String, Object> processedRow = new HashMap<>();

        int columnIndex = 0;
        for (String columnName : columnNames) {
            String columnValue = rowData.get(columnName);
            String dataType = dataTypes.get(columnIndex);

            Object processedValue = processValue(columnValue, dataType);
            processedRow.put(columnName, processedValue);

            columnIndex++;
        }

        return processedRow;
    }

    private static Object processValue(String value, String dataType) {
        if (dataType.equalsIgnoreCase("uuid") && value.equalsIgnoreCase("[Generated]")) {
            return generateUUID();
        } else if (dataType.equalsIgnoreCase("timestamp") && value.equalsIgnoreCase("[Generated]")) {
            return getCurrentTimestamp();
        } else if (dataType.equalsIgnoreCase("date")) {
            // Assuming value is in the format "yyyy-MM-dd"
            LocalDateTime localDateTime = LocalDateTime.parse(value + "T00:00:00");
            return Timestamp.valueOf(localDateTime);
        } else if (dataType.equalsIgnoreCase("num")) {
            return Double.parseDouble(value);
        } else {
            return value;
        }
    }

    private static String generateInsertQuery(String tableName, Map<String, Object> rowData) {
        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("INSERT INTO ").append(tableName).append(" (");

        for (String columnName : rowData.keySet()) {
            queryBuilder.append(columnName).append(", ");
        }

        queryBuilder.setLength(queryBuilder.length() - 2);
        queryBuilder.append(") VALUES (");

        for (int i = 0; i < rowData.size(); i++) {
            queryBuilder.append("?, ");
        }

        queryBuilder.setLength(queryBuilder.length() - 2);
        queryBuilder.append(")");

        return queryBuilder.toString();
    }

    private static void bindRowValues(PreparedStatement preparedStatement, Map<String, Object> rowData) throws SQLException {
        int parameterIndex = 1;
        for (Object value : rowData.values()) {
            if (value instanceof String) {
                preparedStatement.setString(parameterIndex++, (String) value);
            } else if (value instanceof Double) {
                preparedStatement.setDouble(parameterIndex++, (Double) value);
            } else if (value instanceof Timestamp) {
                preparedStatement.setTimestamp(parameterIndex++, (Timestamp) value);
            }
            // Add more conditions for other data types if necessary
        }
    }

    private static String generateUUID() {
        return UUID.randomUUID().toString();
    }

    private static Timestamp getCurrentTimestamp() {
        return Timestamp.valueOf(LocalDateTime.now());
    }
}
